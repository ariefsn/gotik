package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"time"

	"github.com/ariefsn/gotik/constant"
	"github.com/ariefsn/gotik/entities"
	"github.com/ariefsn/gotik/graph"
	"github.com/ariefsn/gotik/logger"
)

// APIDebugInfo is the resolver for the api_debug_info field.
func (r *extraResolver) APIDebugInfo(ctx context.Context, obj *entities.Extra) (*string, error) {
	val := ""
	if v, ok := obj.APIDebugInfo.(string); ok {
		val = v
	}
	return &val, nil
}

// FatalItemIds is the resolver for the fatal_item_ids field.
func (r *extraResolver) FatalItemIds(ctx context.Context, obj *entities.Extra) ([]*string, error) {
	val := []*string{}
	for _, v := range obj.FatalItemIds {
		if v, ok := v.(string); ok {
			val = append(val, &v)
		}
	}

	return val, nil
}

// FeedbackSurvey is the resolver for the feedback_survey field.
func (r *globalDoodleConfigResolver) FeedbackSurvey(ctx context.Context, obj *entities.GlobalDoodleConfig) (*string, error) {
	val := ""
	if v, ok := obj.FeedbackSurvey.(string); ok {
		val = v
	}
	return &val, nil
}

// GetTiktok is the resolver for the getTiktok field.
func (r *queryResolver) GetTiktok(ctx context.Context, id string) (*entities.VideoItem, error) {
	return r.TiktokService.GetById(ctx, id)
}

// SearchTiktok is the resolver for the searchTiktok field.
func (r *queryResolver) SearchTiktok(ctx context.Context, keyword string) ([]*entities.VideoItem, error) {
	if keyword == "" {
		return []*entities.VideoItem{}, nil
	}
	res, status, err := r.TiktokService.Get(ctx, keyword)
	if status.Stats == constant.TiktokQueueStatusNone {
		r.TiktokService.SendQueue(ctx, keyword)
	}
	return res, err
}

// SubSearchTiktok is the resolver for the subSearchTiktok field.
func (r *subscriptionResolver) SubSearchTiktok(ctx context.Context, keyword string) (<-chan []*entities.VideoItem, error) {
	// err := validator.ValidateVar(id, "required")
	// if err != nil {
	// 	return nil, err
	// }

	ch := make(chan []*entities.VideoItem)

	go func() {
		defer close(ch)

		for {
			time.Sleep(1 * time.Second)

			res, err := r.TiktokService.GetNotif(ctx, keyword)

			if err != nil {
				logger.Error(err)
				return
			}

			select {
			case <-ctx.Done():
				// Exit on cancellation
				return

			case ch <- res:
				// Our message went through, do nothing
			}

		}
	}()

	return ch, nil
}

// Extra returns graph.ExtraResolver implementation.
func (r *Resolver) Extra() graph.ExtraResolver { return &extraResolver{r} }

// GlobalDoodleConfig returns graph.GlobalDoodleConfigResolver implementation.
func (r *Resolver) GlobalDoodleConfig() graph.GlobalDoodleConfigResolver {
	return &globalDoodleConfigResolver{r}
}

type extraResolver struct{ *Resolver }
type globalDoodleConfigResolver struct{ *Resolver }
