// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/ariefsn/gotik/entities"
	mock "github.com/stretchr/testify/mock"
)

// TiktokRepository is an autogenerated mock type for the TiktokRepository type
type TiktokRepository struct {
	mock.Mock
}

// GetById provides a mock function with given fields: ctx, id
func (_m *TiktokRepository) GetById(ctx context.Context, id string) (*entities.VideoItem, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *entities.VideoItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.VideoItem, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.VideoItem); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.VideoItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotif provides a mock function with given fields: ctx, keyword
func (_m *TiktokRepository) GetNotif(ctx context.Context, keyword string) ([]*entities.VideoItem, error) {
	ret := _m.Called(ctx, keyword)

	if len(ret) == 0 {
		panic("no return value specified for GetNotif")
	}

	var r0 []*entities.VideoItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entities.VideoItem, error)); ok {
		return rf(ctx, keyword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entities.VideoItem); ok {
		r0 = rf(ctx, keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.VideoItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueueStatus provides a mock function with given fields: ctx, keyword
func (_m *TiktokRepository) GetQueueStatus(ctx context.Context, keyword string) (entities.TiktokVideoStats, error) {
	ret := _m.Called(ctx, keyword)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueStatus")
	}

	var r0 entities.TiktokVideoStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.TiktokVideoStats, error)); ok {
		return rf(ctx, keyword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.TiktokVideoStats); ok {
		r0 = rf(ctx, keyword)
	} else {
		r0 = ret.Get(0).(entities.TiktokVideoStats)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, keyword
func (_m *TiktokRepository) Search(ctx context.Context, keyword string) ([]*entities.VideoItem, error) {
	ret := _m.Called(ctx, keyword)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*entities.VideoItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entities.VideoItem, error)); ok {
		return rf(ctx, keyword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entities.VideoItem); ok {
		r0 = rf(ctx, keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.VideoItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetQueueStatus provides a mock function with given fields: ctx, keyword, stats
func (_m *TiktokRepository) SetQueueStatus(ctx context.Context, keyword string, stats entities.TiktokVideoStats) error {
	ret := _m.Called(ctx, keyword, stats)

	if len(ret) == 0 {
		panic("no return value specified for SetQueueStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entities.TiktokVideoStats) error); ok {
		r0 = rf(ctx, keyword, stats)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: ctx, keyword, videos
func (_m *TiktokRepository) Store(ctx context.Context, keyword string, videos []*entities.VideoItem) {
	_m.Called(ctx, keyword, videos)
}

// NewTiktokRepository creates a new instance of TiktokRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTiktokRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TiktokRepository {
	mock := &TiktokRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
